# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HDSRToolDialog
                                 A QGIS plugin
 HDSR tool voor grondonderzoek interpretatie
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-02-15
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Breinbaas | Rob van Putten
        email                : breinbaasnl@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from pathlib import Path
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
import matplotlib.gridspec as gridspec
from matplotlib.patches import Polygon

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets, QtGui
from qgis.core import QgsRectangle

from .project import Project
from .settings import GRONDSOORTEN

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'hdsr_tool_dialog_base.ui'))


class HDSRToolDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(HDSRToolDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)   

        self.iface = iface

        # workaround matplotlib bug
        self._figure = None   
        self._canvas = None  

        self.project = Project()
        self.current_location_index = -1
        self._init()
        self._connect()

    def _init(self):
        self.project.soiltypes_from_csvstring(GRONDSOORTEN)
        self._updateUI()



        # setup matplotlib figure
        

    def _connect(self):
        self.pbLocations.clicked.connect(self.onPbLocationsClicked)
        self.pbFirst.clicked.connect(self.onPbFirstClicked)
        self.pbPrevious.clicked.connect(self.onPbPreviousClicked)
        self.pbNext.clicked.connect(self.onPbNextClicked)
        self.pbLast.clicked.connect(self.onPbLastClicked)
        self.pbStart.clicked.connect(self.onPbStartClicked)

    def onPbStartClicked(self):
        pass
        

    def onPbFirstClicked(self):
        if self.project.has_locations:
            self.current_location_index = 0
            self._afterUpdateLocation()

    def onPbPreviousClicked(self):
        if self.project.has_locations and self.current_location_index > 0:
            self.current_location_index -= 1
            self._afterUpdateLocation()

    def onPbNextClicked(self):
        if self.project.has_locations and self.current_location_index < len(self.project.locations) - 1:
            self.current_location_index += 1
            self._afterUpdateLocation()

    def onPbLastClicked(self):
        if self.project.has_locations:
            self.current_location_index = len(self.project.locations) - 1
            self._afterUpdateLocation()


    def onPbLocationsClicked(self):
        # this is a workaround a bug from matplotlib which does not allow negative sized figures
        # which happens if you initialize the figure in the constructor so we now create this 
        # figure after opening the locations file which happens definitely after the creation of the GUI
        if self._figure is None:
            print('busy')
            layout = QtWidgets.QVBoxLayout(self.frameMain)
            self._figure = Figure()
            self._figure.set_tight_layout(True)
            self._canvas = FigureCanvas(self._figure)        
            layout.addWidget(self._canvas)

        filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Load Locations File', "", "csv files (*.csv)")[0]

        if filename == "":
            return

        # first reset the current project
        self.project.reset()
        self.current_location_index = -1

        self.project.locations_from_csvfile(filename)
        if len(self.project.locations) > 0:
            self.current_location_index = 0
        else:
            self.current_location_index = -1
        
        self._afterUpdateLocation()

    def _afterUpdateLocation(self):
        if self.current_location_index > -1:
            self.lblLocation.setText(self.project.locations[self.current_location_index].name)
            self._goto()
        else:
            self.lblLocation.setText('geen locaties opgegeven')
   
    def _updateUI(self):
        soiltypes = self.project.soiltypes
        self.tableSoiltypes.setRowCount(len(soiltypes))
        for i, soiltype in enumerate(soiltypes):
            self.tableSoiltypes.setItem(i,0,QtWidgets.QTableWidgetItem(soiltype.name))   
            self.tableSoiltypes.setItem(i,1,QtWidgets.QTableWidgetItem(""))     
            self.tableSoiltypes.item(i,1).setBackground(QtGui.QColor(soiltype.color))    

    def _goto(self):
        if self.current_location_index > -1:
            location = self.project.locations[self.current_location_index]            
            box = QgsRectangle(location.x_rd - 100, location.y_rd - 100, location.x_rd + 100, location.y_rd + 100)
            self.iface.mapCanvas().setExtent(box)
            self.iface.mapCanvas().refresh()
